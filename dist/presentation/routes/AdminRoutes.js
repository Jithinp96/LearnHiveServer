"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const adminController_1 = require("../controllers/adminController");
const AdminLogin_1 = require("../../application/useCases/admin/AdminLogin");
const JWTService_1 = require("../../shared/utils/JWTService");
const CourseController_1 = require("../controllers/CourseController");
const StudentRepository_1 = require("../../infrastructure/repositories/StudentRepository");
const TutorRepository_1 = require("../../infrastructure/repositories/TutorRepository");
const AuthService_1 = require("../../application/services/AuthService");
const AuthMiddleware_1 = __importDefault(require("../../infrastructure/middlewares/AuthMiddleware"));
const adminRoutes = express_1.default.Router();
const jwtService = new JWTService_1.JWTService();
const adminLogin = new AdminLogin_1.AdminLogin(jwtService);
const adminController = new adminController_1.AdminController(adminLogin);
const courseController = new CourseController_1.CourseController();
// const adminAuthService = new AdminAuthService();
const studentRepo = new StudentRepository_1.StudentRepository();
const tutorRepo = new TutorRepository_1.TutorRepository();
const authService = new AuthService_1.AuthService(studentRepo, tutorRepo);
adminRoutes.post('/login', (req, res) => adminController.login(req, res));
adminRoutes.post('/logout/:role', adminController.logout);
adminRoutes.get('/dashboard', (0, AuthMiddleware_1.default)(authService), adminController.getAdminDashboard);
adminRoutes.get('/students', (0, AuthMiddleware_1.default)(authService), (req, res) => adminController.getAllStudents(req, res));
adminRoutes.get('/student/:id', (0, AuthMiddleware_1.default)(authService), (req, res) => adminController.getStudentById(req, res));
adminRoutes.patch('/student/:id/block', (0, AuthMiddleware_1.default)(authService), (req, res) => adminController.blockStudent(req, res));
adminRoutes.get('/tutors', (0, AuthMiddleware_1.default)(authService), (req, res) => adminController.getAllTutors(req, res));
adminRoutes.get('/tutor/:id', (0, AuthMiddleware_1.default)(authService), (req, res) => adminController.getTutorById(req, res));
adminRoutes.patch('/tutor/:id/block', (0, AuthMiddleware_1.default)(authService), (req, res) => adminController.blockTutor(req, res));
adminRoutes.post("/course-category/add", (0, AuthMiddleware_1.default)(authService), adminController.createCategory);
adminRoutes.get("/course-category", (0, AuthMiddleware_1.default)(authService), adminController.getAllCategories);
adminRoutes.patch("/course-category/toggle-status/:id", (0, AuthMiddleware_1.default)(authService), adminController.toggleCategoryStatus);
adminRoutes.put('/course-category/edit/:id', (0, AuthMiddleware_1.default)(authService), adminController.updateCategory);
adminRoutes.get('/courses', (0, AuthMiddleware_1.default)(authService), courseController.fetchAllCoursesforAdmin);
adminRoutes.get("/course/:courseId", (0, AuthMiddleware_1.default)(authService), courseController.fetchCourseDetails);
adminRoutes.put("/course/:courseId/approval", (0, AuthMiddleware_1.default)(authService), courseController.approveCourse);
adminRoutes.put("/course/:courseId/toggle-status", (0, AuthMiddleware_1.default)(authService), courseController.toggleCourseStatus);
exports.default = adminRoutes;
